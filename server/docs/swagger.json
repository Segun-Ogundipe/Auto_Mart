{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Auto Mart",
    "description": "Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "license": {
      "name": "ISC"
    }
  },
  "host": "automart-db.herokuapp.com",
  "basePath": "/api/v2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Creates user",
        "description": "Adds a new user to the database",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to create",
            "schema": {
              "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "street"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "first_name": {
                  "type": "string",
                  "example": "John"
                },
                "last_name": {
                  "type": "string",
                  "example": "Doe"
                },
                "gender": {
                  "type": "string",
                  "example": "male",
                  "enum": [
                    "male",
                    "female"
                  ]
                },
                "street": {
                  "type": "string",
                  "example": "20 Ifelodun"
                },
                "city": {
                  "type": "string",
                  "example": "Agege"
                },
                "state": {
                  "type": "string",
                  "example": "Lagos"
                },
                "country": {
                  "type": "string",
                  "example": "Nigeria"
                },
                "phone": {
                  "type": "number",
                  "example": "08011111111"
                },
                "zip": {
                  "type": "string",
                  "example": "123-543"
                },
                "password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "rted34w23wg"
                },
                "is_admin": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "409": {
            "description": "User with the email exists in the database",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the user from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login a user",
        "description": "Validates a user against list of users in the database. Genearates a new token for user if validation is successful",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to signin",
            "schema": {
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "example": "johndoe@gmail.com"
                },
                "password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "g54gfs5680nj"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was signed in successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "401": {
            "description": "The email is not associated with any user",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the user from being signed in",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/auth/{email}/reset_password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resets user's password",
        "description": "<li>Generates a new password and sends it to user's email if the body is empty.</li><li>Updates user's password if old and new passwords are submitted through request body. User must be logged in to update his password</li><li>Resetting or updating the password invalidates a recently generated token for the user even if it hasn't expired",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "The email of the user's password to be updated",
            "type": "string"
          },
          {
            "name": "password",
            "in": "body",
            "description": "The old and new passwords",
            "schema": {
              "properties": {
                "password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "g54gfs5680nj"
                },
                "new_password": {
                  "maxLength": 15,
                  "minLength": 8,
                  "type": "string",
                  "example": "g54gfs5680nj"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password was updated successfully"
          },
          "401": {
            "description": "The password is incorrect",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "The email is not associated with any user",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the password from being updated",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/car": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Post a car AD",
        "description": "Creates a new car AD and saves it in the database",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car",
            "required": true,
            "in": "body",
            "description": "The body of the car AD to create",
            "schema": {
              "required": [
                "state",
                "status",
                "price",
                "manufacturer",
                "model",
                "body_type"
              ],
              "properties": {
                "state": {
                  "type": "string",
                  "example": "used",
                  "enum": [
                    "new",
                    "used"
                  ]
                },
                "status": {
                  "type": "string",
                  "example": "available"
                },
                "price": {
                  "type": "integer",
                  "format": "double",
                  "example": 1000000.34
                },
                "manufacturer": {
                  "type": "string",
                  "example": "Ford"
                },
                "model": {
                  "type": "string",
                  "example": "F50"
                },
                "body_type": {
                  "type": "string",
                  "example": "truck"
                },
                "image_url": {
                  "type": "string",
                  "example": "./upload/usedtoyota.png"
                },
                "year": {
                  "type": "string",
                  "example": "2019"
                },
                "fuel_type": {
                  "type": "string",
                  "example": "Petrol"
                },
                "fuel_cap": {
                  "type": "integer",
                  "example": "28000"
                },
                "transmission_type": {
                  "type": "string",
                  "example": "Automatic"
                },
                "mileage": {
                  "type": "integer",
                  "example": "50000"
                },
                "color": {
                  "type": "string",
                  "example": "blue"
                },
                "description": {
                  "type": "string",
                  "example": "A blue F50 in great shape....."
                },
                "doors": {
                  "type": "integer",
                  "example": "4"
                },
                "ac": {
                  "type": "boolean",
                  "example": true
                },
                "tinted_windows": {
                  "type": "boolean",
                  "example": false
                },
                "arm_rest": {
                  "type": "boolean",
                  "example": true
                },
                "air_bag": {
                  "type": "boolean",
                  "example": true
                },
                "fm_radio": {
                  "type": "boolean",
                  "example": false
                },
                "dvd_player": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Car AD was created successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "User with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Gets all unsold posted AD. Gets all cars if called by an Admin",
        "description": "<li>Returns a list of all cars if called by and admin</li> <li>Returns a list of all available cars if <b>status</b> query parameter is provided</li> <li>Returns a list of available cars within a specific price range if <b>status</b>, <b>min_price</b> and <b>max_price</b> query parameters are provided.</li> <li>Returns a list of available cars with prices that are equal to or greater than <b>min_price</b> if <b>min_price</b> and <b>status</b> query parameters are provided.</li> <li>Returns a list of available cars with prices that are equal to or lesser than <b>max_price</b> if <b>status</b> and <b>max_price</b> query parameters are provided.</li> <li>Returns a list of available cars within a specific price range and has a particular state if <b>status</b>, <b>min_price</b>, <b>max_price</b> and <b>state</b> query parameters are provided.</li> <li>Returns a list of available cars that are either new or used and are lesser that or equal to <b>max_price</b> if <b>status</b>, <b>max_price</b>, and <b>state</b> query parameters are provided.</li> <li>Returns a list of available cars that are either new or used and are greater that or equal to <b>min_price</b> if <b>status</b>, <b>min_price</b>, and <b>state</b> query parameters are provided.</li> <li>Returns a list of available cars that are either new or used if <b>status</b> and <b>state</b> query parameters are provided.</li> <li>Returns a list of available cars that were made by the same manufacturer if <b>status</b> and <b>manufacturer</b> query parameters are provided.</li>",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "description": "The status of the cars to fetch",
            "type": "string",
            "default": "available"
          },
          {
            "name": "min_price",
            "in": "query",
            "description": "The minimum price of the cars to fetch",
            "type": "integer"
          },
          {
            "name": "max_price",
            "in": "query",
            "description": "The maximum price of the cars to fetch",
            "type": "integer"
          },
          {
            "name": "state",
            "in": "query",
            "description": "The state of the cars to fetch. Must be 'sold' or 'new'",
            "type": "string"
          },
          {
            "name": "manufacturer",
            "in": "query",
            "description": "The make (manufacturer) of the cars to fetch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Cars were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CarsResponse"
            }
          },
          "400": {
            "description": "A client error prevented the cars from being retrieved",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the cars from being retrieved",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/car/{car_id}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Gets a specific posted ad",
        "description": "Gets a specific posted AD  by its id",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car_id",
            "in": "path",
            "required": true,
            "description": "The id of the posted AD to get",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Car was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car from being retrieved",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/car/{car_id}/price": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Updates the price of a posted AD",
        "description": "Updates the price of a specific posted AD. The price of an AD can only be updated by the owner of the AD.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car_id",
            "in": "path",
            "required": true,
            "description": "The id of the posted AD to be updated",
            "type": "integer"
          },
          {
            "name": "price",
            "in": "body",
            "required": true,
            "description": "The new price to set for the posted AD",
            "schema": {
              "properties": {
                "price": {
                  "type": "integer",
                  "format": "double",
                  "example": 1500000.24
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car AD was updated successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/car/{car_id}/status": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Updates the status of a posted AD",
        "description": "Updates the status of a posted car AD. The status of an AD can only be updated by the owner of the AD. Status can only be updated to 'sold' from 'available'",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car_id",
            "in": "path",
            "required": true,
            "description": "The id of the posted AD",
            "type": "integer"
          },
          {
            "name": "status",
            "in": "body",
            "required": false,
            "description": "<li>The new status to set for the posted AD. Must be 'sold' else an error will be thrown</li> <li>The id of the order that was accepted by the seller</li>",
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "example": "sold"
                },
                "order_id": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car AD was updated successfully",
            "schema": {
              "$ref": "#/definitions/CarResponse"
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "car/{car_id}": {
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Deletes a car",
        "description": "Deletes a specific car from the database",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "car_id",
            "in": "path",
            "required": true,
            "description": "The id of the car to be deleted",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Car was successfully deleted",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "404": {
            "description": "Car with id: car_id does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car from being deleted",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a purchase order",
        "description": "Creates a purchase order and saves it in the database",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "The body of the order to create",
            "schema": {
              "required": [
                "car_id",
                "amount"
              ],
              "properties": {
                "car_id": {
                  "type": "integer",
                  "example": 1
                },
                "amount": {
                  "type": "integer",
                  "format": "double",
                  "example": 1000000.34
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Purchase order was created successfully",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "car_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "status": {
                      "type": "string",
                      "example": "pending"
                    },
                    "price": {
                      "type": "integer",
                      "format": "double",
                      "example": 1500000.34
                    },
                    "priceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 1000000.29
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Buyer with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the order from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/order/{order_id}/price": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Updates a purchase order",
        "description": "Updates the amount of a purchase order. A user can only update the amount of his/her purchase order while the order’s status still reads pending",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "description": "The order's id",
            "type": "integer"
          },
          {
            "name": "price",
            "in": "body",
            "required": true,
            "description": "The new amount to set for the order",
            "schema": {
              "properties": {
                "price": {
                  "type": "number",
                  "format": "double",
                  "example": 1405000.87
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase order was updated successfully",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "car_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "updatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    },
                    "status": {
                      "type": "string",
                      "example": "pending"
                    },
                    "price": {
                      "type": "integer",
                      "format": "double",
                      "example": 1500000.34
                    },
                    "oldPriceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 1000000.29
                    },
                    "newPriceOffered": {
                      "type": "integer",
                      "format": "double",
                      "example": 2000000.54
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the order from being edited",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/flag": {
      "post": {
        "tags": [
          "Flag"
        ],
        "summary": "Flag a posted AD",
        "description": "Create a flag for a posted AD",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "body",
            "description": "The body of the flag to create",
            "schema": {
              "required": [
                "car_id",
                "reason"
              ],
              "properties": {
                "car_id": {
                  "type": "integer",
                  "example": 1
                },
                "reason": {
                  "type": "string",
                  "example": "Inflated price"
                },
                "description": {
                  "type": "string",
                  "example": "The price of the car is much more than what it goes for in the open market"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Flag was created successfully",
            "schema": {
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "car_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "reason": {
                      "type": "string",
                      "example": "Inflated price"
                    },
                    "description": {
                      "type": "string",
                      "example": "The price of the car is much more than what it goes for in the open market"
                    },
                    "createdOn": {
                      "type": "string",
                      "format": "date-time",
                      "example": "10/06/2019 8:30am"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields is/are missing",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "404": {
            "description": "Car with id: 1 does not exist",
            "schema": {
              "$ref": "#/definitions/ClientError"
            }
          },
          "500": {
            "description": "A server error prevented the car AD from being created",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Token": {
      "description": "Standard Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
      "type": "apiKey",
      "in": "header",
      "name": "token"
    }
  },
  "definitions": {
    "ClientError": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "There was an error in processing your request"
        }
      }
    },
    "ServerError": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 500
        },
        "message": {
          "type": "string",
          "example": "Server error prevented your request from being processed"
        }
      }
    },
    "UserResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "retfdtblhgt67n89ujnkjyfy5678ghugbdtfvg7vg5bj"
            },
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "johndoe@gmail.com"
            },
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "gender": {
              "type": "string",
              "example": "male",
              "enum": [
                "male",
                "female"
              ]
            },
            "street": {
              "type": "string",
              "example": "20 Ifelodun"
            },
            "city": {
              "type": "string",
              "example": "Agege"
            },
            "state": {
              "type": "string",
              "example": "Lagos"
            },
            "country": {
              "type": "string",
              "example": "Nigeria"
            },
            "phone": {
              "type": "number",
              "example": "08011111111"
            },
            "zip": {
              "type": "string",
              "example": "123-543"
            },
            "is_admin": {
              "type": "boolean",
              "default": false
            },
            "registered_on": {
              "type": "string",
              "example": "10/6/2019 8:30am",
              "format": "date-time"
            }
          }
        }
      }
    },
    "CarResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "owner": {
              "type": "string",
              "example": "johndoe@gmail.com"
            },
            "created_on": {
              "type": "string",
              "example": "10/6/2019 8:30am",
              "format": "date-time"
            },
            "state": {
              "type": "string",
              "example": "used",
              "enum": [
                "new",
                "used"
              ]
            },
            "status": {
              "type": "string",
              "example": "available"
            },
            "price": {
              "type": "integer",
              "format": "double",
              "example": 1000000.34
            },
            "manufacturer": {
              "type": "string",
              "example": "Ford"
            },
            "model": {
              "type": "string",
              "example": "F50"
            },
            "body_type": {
              "type": "string",
              "example": "truck"
            },
            "image_url": {
              "type": "string",
              "example": "./upload/usedtoyota.png"
            },
            "year": {
              "type": "string",
              "example": "2019"
            },
            "fuel_type": {
              "type": "string",
              "example": "Petrol"
            },
            "fuel_cap": {
              "type": "integer",
              "example": "28000"
            },
            "transmission_type": {
              "type": "string",
              "example": "Automatic"
            },
            "mileage": {
              "type": "integer",
              "example": "50000"
            },
            "color": {
              "type": "string",
              "example": "blue"
            },
            "description": {
              "type": "string",
              "example": "A blue F50 in great shape....."
            },
            "doors": {
              "type": "integer",
              "example": "4"
            },
            "ac": {
              "type": "boolean",
              "example": true
            },
            "tinted_windows": {
              "type": "boolean",
              "example": false
            },
            "arm_rest": {
              "type": "boolean",
              "example": true
            },
            "air_bag": {
              "type": "boolean",
              "example": true
            },
            "fm_radio": {
              "type": "boolean",
              "example": false
            },
            "dvd_player": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "CarsResponse": {
      "properties": {
        "status": {
          "type": "integer",
          "example": 200
        },
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "owner": {
                "type": "string",
                "example": "johndoe@gmail.com"
              },
              "created_on": {
                "type": "string",
                "example": "10/6/2019 8:30am",
                "format": "date-time"
              },
              "updated_on": {
                "type": "string",
                "example": "11/6/2019 11:30am",
                "format": "date-time"
              },
              "state": {
                "type": "string",
                "example": "used",
                "enum": [
                  "new",
                  "used"
                ]
              },
              "status": {
                "type": "string",
                "example": "available"
              },
              "price": {
                "type": "integer",
                "format": "double",
                "example": 1000000.34
              },
              "manufacturer": {
                "type": "string",
                "example": "Ford"
              },
              "model": {
                "type": "string",
                "example": "F50"
              },
              "body_type": {
                "type": "string",
                "example": "truck"
              },
              "image_url": {
                "type": "string",
                "example": "./upload/usedtoyota.png"
              },
              "year": {
                "type": "string",
                "example": "2019"
              },
              "fuel_type": {
                "type": "string",
                "example": "Petrol"
              },
              "fuel_cap": {
                "type": "integer",
                "example": "28000"
              },
              "transmission_type": {
                "type": "string",
                "example": "Automatic"
              },
              "mileage": {
                "type": "integer",
                "example": "50000"
              },
              "color": {
                "type": "string",
                "example": "blue"
              },
              "description": {
                "type": "string",
                "example": "A blue F50 in great shape....."
              },
              "doors": {
                "type": "integer",
                "example": "4"
              },
              "ac": {
                "type": "boolean",
                "example": true
              },
              "tinted_windows": {
                "type": "boolean",
                "example": false
              },
              "arm_rest": {
                "type": "boolean",
                "example": true
              },
              "air_bag": {
                "type": "boolean",
                "example": true
              },
              "fm_radio": {
                "type": "boolean",
                "example": false
              },
              "dvd_player": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      }
    }
  }
}